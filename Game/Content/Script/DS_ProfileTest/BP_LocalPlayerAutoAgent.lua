---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lixiaohua.
--- DateTime: 2021/11/16 9:10
---

require("DS_ProfileTest.Utils.DsCommonfunc")

--- 本地Player自动测试
local LocalPlayerAutoAgent = Class()

LocalPlayerAutoAgent.AGameTaskActor = nil
LocalPlayerAutoAgent.GameTask = nil
LocalPlayerAutoAgent.IsAlreadyBound = false

--- 操作类型
local AutoOperations = {
    InvalidOperation = -1,
    MoveForward = 0,    -- 向前移动
    MoveBack = 1,       -- 向后移动
    MoveLeft = 2,       -- 向左移动
    MoveRight = 3,      -- 向右移动
    Fire = 4,           -- 开枪
    NormalSkill = 5,    -- 普通技能
    SuperSkill = 6,     -- 大招技能
}

--- 操作类型对应的字符串(仅用于debug)
local function GetOperationString(Operation)
    if (Operation == AutoOperations.MoveForward) then
        return "MoveForward"
    elseif (Operation == AutoOperations.MoveBack) then
        return "MoveBack"
    elseif (Operation == AutoOperations.MoveLeft) then
        return "MoveLeft"
    elseif (Operation == AutoOperations.MoveRight) then
        return "MoveRight"
    elseif (Operation == AutoOperations.Fire) then
        return "Fire"
    elseif (Operation == AutoOperations.NormalSkill) then
        return "NormalSkill"
    elseif (Operation == AutoOperations.SuperSkill) then
        return "SuperSkill"
    elseif (Operation == AutoOperations.InvalidOperation) then
        return "InvalidOperation"
    end
end

--- 操作持续时间范围
local OperationHoldTimeRange = {
    Max = 5,
    Min = 1,
}

-- 任务更新时绑定触发的回调函数
function LocalPlayerAutoAgent:OnGameTaskExecuteChange(ExecuteNode)
    local ExecuteDescriptionID = ExecuteNode.ExecuteDescriptionID
    local bHiddenExectue = ExecuteNode.bHiddenExectue
    local bCanFinish = ExecuteNode.bCanFinish   -- 单机时值才有效
    local ExecuteDes = ExecuteNode.ExecuteDes
end

-- 绑定任务更新时的回调
function LocalPlayerAutoAgent:BindGameTaskExecuteChange()
    --任务更新回调
    if self.GameTask == nil then
        self.GameTask = self.AGameTaskActor:GetGameTask()
    end
    
    if IsValid(self.GameTask) and self.IsAlreadyBound == false then
        if self.IsAlreadyBound == false then
            self.GameTask.OnGameTaskExecuteChange:Add(
                self,
                function(ThisPtr, ExecuteNode)
                    DSCommonError.tfPrint("INFO","======== LocalPlayerAutoAgent:OnGameTaskExecuteChange =========")
                    self:OnGameTaskExecuteChange(ExecuteNode)
                end
            )

            self.IsAlreadyBound = true
        end
    end
end

function LocalPlayerAutoAgent:ReceiveBeginPlay()
    -- 当前执行的操作
    self.CurrentOperation = AutoOperations.InvalidOperation

    -- 当前操作执行的最长时间
    self.OperationHoldTime = 0
    -- 当前操作计时
    self.OperationTimeCount = 0
   
    self.IsAlreadyBound = false
    self.AGameTaskActor = nil
    self.GameTask = nil

    --[[
    local AGameTaskActorList = UE4.UGameplayStatics.GetAllActorsOfClass(GetGameIns(), UE4.AGameTaskActor)

    for i = 1, AGameTaskActorList:Length() do
        self.AGameTaskActor = AGameTaskActorList:Get(i);
        if IsValid(self.AGameTaskActor) then
             -- 关卡结束回调
             self.AGameTaskActor.OnTaskFinish:Add(
                self,
                function(ThisPtr,FinishResult,LevelTime,FailedReason)
                    DSCommonError.tfPrint("INFO","======== LocalPlayerAutoAgent:OnTaskFinish =========")
                    Launch.End()
                end
            )
            break
        end
    end
    --]]

    self.AGameTaskActor = UE4.AGameTaskActor.GetGameTaskActor(GetGameIns())
    if IsValid(self.AGameTaskActor) then
        -- 关卡结束回调
        self.AGameTaskActor.OnTaskFinish:Add(
            self,
            function(ThisPtr,FinishResult,LevelTime,FailedReason)
                DSCommonError.tfPrint("INFO","======== LocalPlayerAutoAgent:OnTaskFinish start =========")
                UE4.Timer.Add(13, function()
                    DSCommonError.tfPrint("INFO","======== LocalPlayerAutoAgent:OnTaskFinish end =========")
                        Launch.End()
                    end);
            end
        )
    end
end

function LocalPlayerAutoAgent:ReceiveTick(DeltaTime)
    --local levID = Online.GetOnlineLevelId()
    --print("LocalPlayerAutoAgent DSCommonfunc.GetOnlineLevelId() levID = ",levID)

    -- local LevelCountDownTime = DSCommonfunc.GetLevelCountDownTime()
    -- print("LocalPlayerAutoAgent DSCommonfunc.GetLevelCountDownTime() LevelCountDownTime =",LevelCountDownTime)

    --local TotalLevelCountDownTime = DSCommonfunc.GetTotalLevelCountDownTime()
    --print("LocalPlayerAutoAgent DSCommonfunc.GetLevelCountDownTime() TotalLevelCountDownTime =",TotalLevelCountDownTime)

    -- local pid = UE4.UDsProfileFunctionLib.GetCommandLineByPlayerId()
    -- print("LocalPlayerAutoAgent DSCommonfunc.GetCommandLineByPlayerId() pid =",pid)

    self:BindGameTaskExecuteChange()
    DSCommonfunc:Tick(DeltaTime)

    -- 操作结束, 重新随机一个操作行为
    if (self:IsOperationDone()) then
        self:RandomOperation()
        local nowhp,maxhp = DSCommonfunc.GetPlayerHealth()
        print("======== LocalPlayerAutoAgent:nowhp ",nowhp)
        print("======== LocalPlayerAutoAgent:maxhp ",maxhp)
        if (nowhp/maxhp < 0.5) then
            --DSCommonfunc.HealSelf()
        end

        -- local randompos = UE4.UDsProfileFunctionLib.GetRandomReachablePointInRadiusByPlayer(1000)
        -- UE4.UDsProfileFunctionLib.MoveTo(randompos.X,randompos.Y,randompos.Z)
        -- print("======== randompos ========",randompos.X,randompos.Y,randompos.Z)
    end

    self.OperationTimeCount = self.OperationTimeCount + DeltaTime
end

--- 当前操作是否已结束
function LocalPlayerAutoAgent:IsOperationDone()
    return self.OperationTimeCount >= self.OperationHoldTime
end

--- 随机操作
function LocalPlayerAutoAgent:RandomOperation()
    self.CurrentOperation = math.random(0, 6)
    self.OperationHoldTime = math.random() * (OperationHoldTimeRange.Max - OperationHoldTimeRange.Min) + OperationHoldTimeRange.Min
    self.OperationTimeCount = 0

    printf("LocalPlayerAutoAgent:RandomOperation CurrentOperation:%s", GetOperationString(self.CurrentOperation))
end

--- 执行当前操作
function LocalPlayerAutoAgent:OnExecuteOperation()
    local PlayerController = UE4.UGameplayStatics.GetPlayerController(GetGameIns(), 0)
    if (not IsValid(PlayerController)) then
        return
    end

    if (self.CurrentOperation == AutoOperations.MoveForward) then
        PlayerController:MoveForward(1)
    elseif (self.CurrentOperation == AutoOperations.MoveBack) then
        PlayerController:MoveForward(-1)
    elseif (self.CurrentOperation == AutoOperations.MoveLeft) then
        PlayerController:MoveRight(-1)
    elseif (self.CurrentOperation == AutoOperations.MoveRight) then
        PlayerController:MoveRight(1)
    elseif (self.CurrentOperation == AutoOperations.Fire) then
        PlayerController:UseSkill(0, UE4.ESkillCastType.Press)
    elseif (self.CurrentOperation == AutoOperations.NormalSkill) then
        --PlayerController:OnButtonDown(2, 2, UE4.EPCKeyboardType.Skill_1)
        PlayerController:UseSkill(2, UE4.ESkillCastType.Press)
        --PlayerController:UseSkill(2, UE4.ESkillCastType.Release)
    elseif (self.CurrentOperation == AutoOperations.SuperSkill) then
        --PlayerController:OnButtonDown(4, 4, UE4.EPCKeyboardType.SupperSkill)
        PlayerController:UseSkill(4, UE4.ESkillCastType.Press)
        --PlayerController:UseSkill(4, UE4.ESkillCastType.Release)
    end
end

--- 结束当前操作
function LocalPlayerAutoAgent:OnEndOperation()
    local PlayerController = UE4.UGameplayStatics.GetPlayerController(GetGameIns(), 0)

    if (not IsValid(PlayerController)) then
        return
    end

    if (self.CurrentOperation == AutoOperations.MoveForward) then
        PlayerController:MoveForward(0)
    elseif (self.CurrentOperation == AutoOperations.MoveBack) then
        PlayerController:MoveForward(0)
    elseif (self.CurrentOperation == AutoOperations.MoveLeft) then
        PlayerController:MoveRight(0)
    elseif (self.CurrentOperation == AutoOperations.MoveRight) then
        PlayerController:MoveRight(0)
    elseif (self.CurrentOperation == AutoOperations.Fire) then
        PlayerController:UseSkill(0, UE4.ESkillCastType.Release)
    elseif (self.CurrentOperation == AutoOperations.NormalSkill) then
        --PlayerController:OnButtonUp(2, 2, UE4.EPCKeyboardType.Skill_1)
        PlayerController:UseSkill(2, UE4.ESkillCastType.Release)
    elseif (self.CurrentOperation == AutoOperations.SuperSkill) then
        --PlayerController:OnButtonUp(4, 4, UE4.EPCKeyboardType.SupperSkill)
        PlayerController:UseSkill(4, UE4.ESkillCastType.Release)
    end

    printf("LocalPlayerAutoAgent:OnEndOperation CurrentOperation:%s", GetOperationString(self.CurrentOperation))
end

return LocalPlayerAutoAgent
