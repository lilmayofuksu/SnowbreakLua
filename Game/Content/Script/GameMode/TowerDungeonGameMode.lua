---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lixiaohua.
--- DateTime: 2021/6/24 10:36
---

local TowerDungeonGameMode = Class("GameMode.DungeonGameModeBase")

function TowerDungeonGameMode:OnReceiveBeginPlayEnd()
    self.Super:OnReceiveBeginPlayEnd()

    local LevelAreaNumber = ClimbTowerLogic.GetArea() or 0
    -- 区域id(房间号)和门序号的映射(具体见门的排序逻辑)
    self.LastDoorNumber = LevelAreaNumber * 2 - 1
    self.DoorClass = LoadClass("/Game/Blueprints/LevelTask/Level/Level00/dungeon/Door_On.Door_On")
    if self.LastDoorNumber > 0 then 
        self.NeedOpenDoor = true
    end
end

function TowerDungeonGameMode:OnDungeonChunksLoaded(Dungeon)
    self.Super.OnDungeonChunksLoaded(self, Dungeon)
    printf("TowerDungeonGameMode:OnDungeonChunksLoaded End")
end

-- 得到起始房间
function TowerDungeonGameMode:GetStartRoomId()
    return ClimbTowerLogic.GetArea() or 0;
end

--- 当一个chunk块显示出来时
function TowerDungeonGameMode:EventOnChunkVisible(Dungeon, DungeonStreamingChunk)
    local DoorArray = DungeonStreamingChunk:GetAllActorsOfClass(self.DoorClass)
    local OrderNum = DungeonStreamingChunk.OrderNum;
    for i = 1, DoorArray:Length() do
        local Door = DoorArray:Get(i);
        Door.bIsInit = true

        if self.NeedOpenDoor then
            for j = 1, Door.Tags:Length() do
                local NumberTag = tonumber(Door.Tags:Get(j))
                if NumberTag and NumberTag <= self.LastDoorNumber then
                    Door.bIsEnabled = true;
                    --Door:OpenDoor()
                    Door:SetDoorState(2)
                    Door.bIsEnabled = false
                    break
                end
            end
        end

        if self.MaxCorridorId and OrderNum >= self.MaxCorridorId then 
            Door.bIsEnabled = false;
        end
    end

    self.tbDoorTrigger[DungeonStreamingChunk] = {}
    local tbList = self.tbDoorTrigger[DungeonStreamingChunk]
    local DoorTrigger = LoadClass("/GameTask/DoorTrigger.DoorTrigger_C")
    local TriggerArray = DungeonStreamingChunk:GetAllActorsOfClass(DoorTrigger)
    for i = 1, TriggerArray:Length() do
        local Trigger = TriggerArray:Get(i);
        table.insert(tbList, Trigger);
    end
    self:UpdateDoorTriggerState(DungeonStreamingChunk)
    print("TowerDungeonGameMode Trigger", DungeonStreamingChunk.OrderNum, TriggerArray:Length());
end

--- 当到达新过道时
function TowerDungeonGameMode:EventOnNewCorridor(CorridorId)
    self.Super:EventOnNewCorridor(CorridorId)

    -- 把低于过道编号的所有door trigger都禁用掉
    if self.MaxCorridorId then 
        if CorridorId > self.MaxCorridorId then 
            self.MaxCorridorId = CorridorId;
            self:UpdateDoorTriggerState()
        end
    else 
        self.MaxCorridorId = CorridorId
        self.InitCorridorId = CorridorId
        self:UpdateDoorTriggerState()
    end
end

--- 当有Chunk卸载时
function TowerDungeonGameMode:EventOnChunkUnload(Dungeon, DungeonStreamingChunk)
    self.Super:EventOnChunkUnload(Dungeon, DungeonStreamingChunk)

    self.tbDoorTrigger[DungeonStreamingChunk] = nil;
end

--- 更新door trigger的状态
function TowerDungeonGameMode:UpdateDoorTriggerState(Chunk)
    if Chunk then 
        self:UpdateDoorTriggerStateList(Chunk, self.tbDoorTrigger[Chunk])
    else 
        for chunk, tbList in pairs(self.tbDoorTrigger) do 
            self:UpdateDoorTriggerStateList(chunk, tbList)
        end
    end
end

function TowerDungeonGameMode:UpdateDoorTriggerStateList(Chunk, tbList) 
    if not self.MaxCorridorId or not tbList then return end 

    local order = Chunk.OrderNum

    if order < self.MaxCorridorId then 
        for _, trigger in ipairs(tbList) do 
            trigger.bEnabled = false
        end
    end
end

return TowerDungeonGameMode